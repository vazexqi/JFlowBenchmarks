h1. JFlow Benchmarks

This repository contains several open source flow-based applications written in Java that we have parallelized.

h2. Getting started with development

All of the projects have corresponding Eclipse projects that can be easily imported into Eclipse Juno (or later) for development. 

h4. Java Version

Please use Java 1.6. The version of the WALA analysis libraries that I will be using does not support the newer Java 7 bytecodes.

h4. Coding Conventions

When coding with Eclipse, please use the included code formatter (from Eclipse JDT) in the "Coding conventions" folder. For more information on using the custom code formatter, refer to this "guide":http://help.eclipse.org/juno/index.jsp?topic=/org.eclipse.jdt.doc.user/reference/preferences/java/codestyle/ref-preferences-formatter.htm.

h2. Getting the right version of GPars

The parallelized version uses a `FlowGraph` construct that is not part of the official GPars distribution. We have bundled the necessary jars with the parallelized versions of the benchmarks. We have also set up the .classpath file so that Eclipse can recognize those libraries.

If you are interested in seeing the source code for our implementation of `FlowGraph` consult our [forked|https://github.com/vazexqi/GPars/commits/master] version of the GPars repository.

h2. The benchmarks (that we actually used)

While there are several benchmarks that we have looked at, we decided on _seven_. We made this decision based on the lines of code, and whether the benchmarks were too array-intensive. Our analysis is _index-insensitive_ meaning that it will unlikely work well for heavy array operations.

We further divide those six benchmarks into two categories: big and small. Big applications (Lire, Jbzip2, Duke) are real applications that we could find. Small applications (MolDyn, KMeans, MonteCarlo, RayTracer) are from the group who did OoOJava. We use the big applications to show the utility of our tool on large applications where static analysis is likely to give warnings. We use the small applications as verification to show that our tool can work without much user intervention on small applications (that others have worked on).

h4. Lire

The LIRE (Lucene Image REtrieval) library provides a simple way to retrieve images and photos based on their color and texture characteristics. LIRE creates a Lucene index of image features for content based image retrieval (CBIR). Three of the available image features are taken from the MPEG-7 Standard: ScalableColor, ColorLayout and EdgeHistogram a fourth one, the Auto Color Correlogram has been implemented based on recent research results.

Original code from "Lire":http://sourceforge.net/projects/caliph-emir/?source=navbar.

h4. Jbzip2

jbzip2 is a Java bzip2 compression/decompression library. It can be used as a replacement for the Apache CBZip2InputStream / CBZip2OutputStream classes.

Original code from "Jbzip2":http://code.google.com/p/jbzip2/.

h4. Duke

Duke is a fast and flexible deduplication (or entity resolution, or record linkage) engine written in Java on top of Lucene.

Original code from "Duke":http://code.google.com/p/duke/

h4. MolDyn

Molecular Dynamics Simulation. From OoOJava, which ported it over from the Java Grande benchmarks.

h4. KMeans

KMeans clustering algorithm. From OoOJava, which ported it over from the STAMP Transactional Memory benchmark.

h4. MonteCarlo

Monte Carlo simulation for option pricing. From OoOJava, which ported it over from the Java Grande benchmarks.

h4. RayTracer

Ray tracing application. From OoOJava, which ported it over from the Java Grande benchmarks.


